/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package personalmanager;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Box;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

/**
 * @version 1.0
 * @author Dunkel, DunklerHeld
 */
public class personalGUI extends javax.swing.JFrame {

    /**
     * Creates new form personalGUI
     */
    public personalGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabPersonal = new javax.swing.JTable();
        pnlControls = new javax.swing.JPanel();
        cmdCreateWorker = new javax.swing.JButton();
        cmdDeleteWorker = new javax.swing.JButton();
        cmdEditWorker = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuOptions = new javax.swing.JMenu();
        mitNewMitarbeiter = new javax.swing.JMenuItem();
        mitEdit = new javax.swing.JMenuItem();
        mitDelete = new javax.swing.JMenuItem();
        mse1 = new javax.swing.JPopupMenu.Separator();
        mitSave = new javax.swing.JMenuItem();
        mitReload = new javax.swing.JMenuItem();
        mnuDB = new javax.swing.JMenu();
        mitDB = new javax.swing.JMenuItem();
        mitDBSave = new javax.swing.JMenuItem();
        mitDBLoad = new javax.swing.JMenuItem();
        mse2 = new javax.swing.JPopupMenu.Separator();
        mitDBClose = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mitarbeiter");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tabPersonal.setModel(model);
        tabPersonal.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tabPersonal.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabPersonal);

        pnlControls.setBorder(javax.swing.BorderFactory.createTitledBorder("Control Panel"));

        cmdCreateWorker.setText("Mitarbeiter hinzufügen");
        cmdCreateWorker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCreateWorkerActionPerformed(evt);
            }
        });

        cmdDeleteWorker.setText("Mitarbeiter löschen");
        cmdDeleteWorker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDeleteWorkerActionPerformed(evt);
            }
        });

        cmdEditWorker.setText("Mitarbeiter bearbeiten");
        cmdEditWorker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEditWorkerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlControlsLayout = new javax.swing.GroupLayout(pnlControls);
        pnlControls.setLayout(pnlControlsLayout);
        pnlControlsLayout.setHorizontalGroup(
            pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmdCreateWorker)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdEditWorker)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdDeleteWorker)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlControlsLayout.setVerticalGroup(
            pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdCreateWorker)
                    .addComponent(cmdDeleteWorker)
                    .addComponent(cmdEditWorker))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mnuOptions.setText("Optionen");

        mitNewMitarbeiter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, 0));
        mitNewMitarbeiter.setText("Neuen Mitarbeiter hinzufügen");
        mitNewMitarbeiter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitNewMitarbeiterActionPerformed(evt);
            }
        });
        mnuOptions.add(mitNewMitarbeiter);

        mitEdit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        mitEdit.setText("Mitarbeiter bearbeiten");
        mitEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitEditActionPerformed(evt);
            }
        });
        mnuOptions.add(mitEdit);

        mitDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_MASK));
        mitDelete.setText("Mitarbeiter Löschen");
        mitDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitDeleteActionPerformed(evt);
            }
        });
        mnuOptions.add(mitDelete);
        mnuOptions.add(mse1);

        mitSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, 0));
        mitSave.setText("Speichern");
        mitSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitSaveActionPerformed(evt);
            }
        });
        mnuOptions.add(mitSave);

        mitReload.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        mitReload.setText("Neu laden");
        mitReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitReloadActionPerformed(evt);
            }
        });
        mnuOptions.add(mitReload);

        jMenuBar1.add(mnuOptions);

        mnuDB.setText("Datenbank");

        mitDB.setText("Mit Datenbank verbinden");
        mitDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitDBActionPerformed(evt);
            }
        });
        mnuDB.add(mitDB);

        mitDBSave.setText("In Datenbank abspeichern");
        mitDBSave.setEnabled(false);
        mitDBSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitDBSaveActionPerformed(evt);
            }
        });
        mnuDB.add(mitDBSave);

        mitDBLoad.setText("Aus Datenbank auslesen");
        mitDBLoad.setEnabled(false);
        mitDBLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitDBLoadActionPerformed(evt);
            }
        });
        mnuDB.add(mitDBLoad);
        mnuDB.add(mse2);

        mitDBClose.setText("Verbindung trennen");
        mitDBClose.setEnabled(false);
        mitDBClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mitDBCloseActionPerformed(evt);
            }
        });
        mnuDB.add(mitDBClose);

        jMenuBar1.add(mnuDB);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName("MitarbeiterForm");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    //All sorts of declarations
    Mitarbeiter[] mitarbeiter = new Mitarbeiter[8999];
    int mitarbeiterCount = 0;
    
    String documents = System.getProperty("user.home")+"/Documents";
    
    boolean success;
    
    String xmlfolder = documents + "/PersonalManager/";
    
    private static Connection conn;
    
    String dbHost = "none";
    String dbPort = "none";
    String dbName = "none";
    String dbUser = "none";
    String dbPassword = "none";
    
    String result = "";
    InputStream inputStream;
    String workercounts = "workercount";
    String dbHosts = "dbHost";
    String dbPorts = "dbPort";
    String dbNames = "dbName";
    String dbUsers = "dbUser";
    
    private DefaultTableModel model = new DefaultTableModel(0, 0) {
        @Override
        public boolean isCellEditable(int row, int column){return false;} 
            };
    
    int iWorkercount = 0;
    
    final int TYPE_EDIT = 1;
    final int TYPE_DELETE = 2;
    //End of all sorts of declarations
    
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        tabPersonal.setModel(model);
        model.addColumn("Name");
        model.addColumn("Mitarbeiter-ID");
        model.addColumn("Gehalt");
        model.addColumn("Zeit gearbeitet");

        success = (new File(documents + "/PersonalManager")).mkdirs();
        
        if (!success) {
                
            System.out.println("Folder creation Failed (" + xmlfolder + ")");
                
        }else{
                
                System.out.println("Folder created (" + xmlfolder + ")");
                
                }
        
        loadall();
        
        WindowListener exitListener = new WindowAdapter() {

        @Override
        public void windowClosing(WindowEvent e) {
            
            closeMe();

        }
    };
        
    this.addWindowListener(exitListener);
      
    }//GEN-LAST:event_formWindowOpened

    private void mitNewMitarbeiterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitNewMitarbeiterActionPerformed

        getNewWorkerInfo();
        
    }//GEN-LAST:event_mitNewMitarbeiterActionPerformed

    private void mitSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitSaveActionPerformed
        
        saveall();
        
    }//GEN-LAST:event_mitSaveActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeMe();
    }//GEN-LAST:event_formWindowClosing

    private void mitReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitReloadActionPerformed
        
        model.setRowCount(0);
        
        loadall();
        
    }//GEN-LAST:event_mitReloadActionPerformed

    private void mitDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitDeleteActionPerformed
        
        deleteWorker();
        
    }//GEN-LAST:event_mitDeleteActionPerformed

    private void mitEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitEditActionPerformed
        
      editWorker();
        
    }//GEN-LAST:event_mitEditActionPerformed

    private void cmdDeleteWorkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDeleteWorkerActionPerformed
        deleteWorker();
    }//GEN-LAST:event_cmdDeleteWorkerActionPerformed

    private void cmdCreateWorkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCreateWorkerActionPerformed
        getNewWorkerInfo();
    }//GEN-LAST:event_cmdCreateWorkerActionPerformed

    private void cmdEditWorkerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEditWorkerActionPerformed
        editWorker();
    }//GEN-LAST:event_cmdEditWorkerActionPerformed

    private void mitDBCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitDBCloseActionPerformed

        try {
            conn.close();
            mitDB.setEnabled(true);
            mitDBClose.setEnabled(false);
            mitDBSave.setEnabled(false);
            mitDBLoad.setEnabled(false);
            
            dbHost = "none";
            dbPort = "none";
            dbName = "none";
            dbUser = "none";
            
            JOptionPane.showMessageDialog(null, "Verbindung wurde getrennt.", "", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_mitDBCloseActionPerformed

    private void mitDBLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitDBLoadActionPerformed

        loadAllDB();

    }//GEN-LAST:event_mitDBLoadActionPerformed

    private void mitDBSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitDBSaveActionPerformed

        saveAllDB();

    }//GEN-LAST:event_mitDBSaveActionPerformed

    private void mitDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mitDBActionPerformed

        JTextField dbHostField = new JTextField(7);
        JTextField dbNameField = new JTextField(12);
        JTextField dbPortField = new JTextField(5);
        JTextField dbUserField = new JTextField(12);
        JTextField dbPassField = new JPasswordField(10);

        JPanel dbInfo = new JPanel();
        dbInfo.add(new JLabel("Host"));
        dbInfo.add(dbHostField);
        dbInfo.add(new JLabel("DB-Name"));
        dbInfo.add(dbNameField);
        dbInfo.add(new JLabel("Port"));
        dbInfo.add(dbPortField);
        dbPortField.setText("3306");
        dbInfo.add(new JLabel("User"));
        dbInfo.add(dbUserField);
        dbInfo.add(new JLabel("Password"));
        dbInfo.add(dbPassField);

        int result = JOptionPane.showConfirmDialog(null, dbInfo,
            "Datenbankinformationen", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {

            System.out.println("--- Datenbank Start---\n");
            System.out.println("Host: " + dbHostField.getText());
            dbHost = dbHostField.getText();
            System.out.println("Name: " + dbNameField.getText());
            dbName = dbNameField.getText();
            System.out.println("Port: " + dbPortField.getText());
            dbPort = dbPortField.getText();
            System.out.println("User: " + dbUserField.getText());
            dbUser = dbUserField.getText();
            System.out.println("Password: *****");
            dbPassword = dbPassField.getText();
            System.out.println("\n--- Datenbank Ende---\n");

            // darkdl.de ni520829_2sql1 3306 ni520829_2sql1 HallohalloHallo

            connectDB();
            
        }

    }//GEN-LAST:event_mitDBActionPerformed
    
    private int findMitarbeiterById(int id) {
        int ret = -1;
        for (int i = 0; i < mitarbeiter.length; i++) {
                    if(mitarbeiter[i].getPersonalNumber() == id) {
                        ret = i;
                        break;
                    }
                }
        return ret;
    }
    
    private void deleteWorker() {
        
        int delete;
        
        if(tabPersonal.getSelectedRow() != -1) {
            
            
            delete = findMitarbeiterById(Integer.parseInt(tabPersonal.getValueAt(tabPersonal.getSelectedRow(), 1).toString().substring(1)));
            
        }
        else {
            delete = findMitarbeiterByUnknownId(TYPE_DELETE);
        }
        
        if(delete != -1) {
            String message = "Möchten Sie " + mitarbeiter[delete].getName() + " wirklich löschen?";
            if(JOptionPane.showConfirmDialog(null, message, "Löschen", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.OK_OPTION) {
                try{
                    Mitarbeiter m = mitarbeiter[delete];
                    System.out.println(m.getName());
                    System.out.println(m.getPersonalNumber());
                    File f = new File(xmlfolder + "mitarbeiter" + m.getPersonalNumber() + ".xml");
                    System.out.println(f.getPath());
                    f.delete();
                    mitarbeiter[delete] = null;
                    mitarbeiterCount -= 1;
                    saveall();
                    loadall();
                }
                catch(Exception x) {
                    JOptionPane.showMessageDialog(null, "Mitarbeiter nicht gefunden", "Fehler", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    
    private int findMitarbeiterByUnknownId(int type) {
        
        
        String message = "";
        int ret = -1;
        
        
        switch(type) {
            case TYPE_EDIT:
                message = "Welchen Mitarbeiter bearbeiten?";
                break;
            case TYPE_DELETE:
                message = "Welchen Mitarbeiter löschen?";
                break;
        }
        
        JTextField idField = new JTextField(5);
      
        JPanel editWorker = new JPanel();
        editWorker.add(new JLabel("Mitarbeiter-ID:"));
        editWorker.add(idField);

        int result = JOptionPane.showConfirmDialog(null, editWorker, 
               message, JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
      
        if (result == JOptionPane.OK_OPTION) {

            
            try{
                
                int searchID = Integer.parseInt(idField.getText().trim());
                int toEditID = searchID - 1000;

                for (int i = 0; i <= toEditID; i++) {

                    if (mitarbeiter[i].getPersonalNumber() == searchID) {
                        
                        ret = i;
                        break;
                        
                    }
                }

            }catch (NumberFormatException x){
                
                JOptionPane.showMessageDialog(null, "Bitte Id eingeben", "Fehler", JOptionPane.ERROR_MESSAGE);
                
            }catch(Exception ex){

                System.out.println("Konnte Datei nicht finden. Weiss auch nicht welche.");

            }

        }
        
        return ret;
    }
    
    private void editWorker() {
      
        int edit = -1;
        Mitarbeiter toEdit = null;
        
        if(tabPersonal.getSelectedRow() != -1) {
            
            edit = findMitarbeiterById(Integer.parseInt(tabPersonal.getValueAt(tabPersonal.getSelectedRow(), 1).toString().substring(1)));
            
        }
        else {
            edit = findMitarbeiterByUnknownId(TYPE_EDIT);
        }

        if(edit != -1) {

            if (toEdit != null || true) {

                JTextField nameField = new JTextField(15);
                JTextField salaryField = new JTextField(5);

                JPanel toEditWorker = new JPanel();
                toEditWorker.add(new JLabel("Vorname:"));
                toEditWorker.add(nameField);
                toEditWorker.add(Box.createHorizontalStrut(10));
                toEditWorker.add(new JLabel("Gehalt:"));
                toEditWorker.add(salaryField);

                nameField.setText(mitarbeiter[edit].getName());
                salaryField.setText(Double.toString(mitarbeiter[edit].getSalary()) + "€");

                int resultEdit = JOptionPane.showConfirmDialog(null, toEditWorker, 
                   "Neue Werte für Mitarbeiter", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

                if (resultEdit == JOptionPane.OK_OPTION) {

                    mitarbeiter[edit].setName(nameField.getText());
                    mitarbeiter[edit].setSalary(Double.parseDouble(salaryField.getText().replace('€', '\0').replace(',', '.').trim()));
                    saveall();
                    loadall();

                }

            }
        }else{

                JOptionPane.showMessageDialog(null, "Mitarbeiter  konnte nicht gefunden werden!", "Fehler", JOptionPane.OK_OPTION);

            }
    }
    
    private void saveall() {
        
        String propFileName = "settings.properties";
        PrintWriter writer = null;
        
        try {
            
            writer = new PrintWriter(xmlfolder + propFileName);
            
        }catch(Exception ex){ 
        }
        
        Properties prop = new Properties();
 
        try {
            inputStream = new FileInputStream(xmlfolder + propFileName);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
                
		if (inputStream != null) {
                            
            try {
                
                prop.load(inputStream);
                prop.clear();
                
            } catch (IOException ex) {
                Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
                            prop.setProperty(workercounts, String.valueOf(mitarbeiterCount));
                            prop.setProperty(dbHosts, dbHost);
                            prop.setProperty(dbPorts, dbPort);
                            prop.setProperty(dbNames, dbName);
                            prop.setProperty(dbUsers, dbUser);
                            
            try {
                
                prop.store(writer, "\n Properties-Datei des personalmanagers - NICHT LÖSCHEN!\n\n\n   ...Bitte\n");
                
            } catch (IOException ex) {
                Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
            }finally{
                
                writer.close();
                
            }
            
        }
        
        try {
            int max = mitarbeiterCount;
            
            System.out.println("--- Speichern Start ---\n");
            
            for (int i = 0; i < max; i++) {
                if (mitarbeiter[i] != null) {
                    JAXBContext jaxbContext = JAXBContext.newInstance(Mitarbeiter.class);
                    Marshaller jaxbMarshaller = jaxbContext.createMarshaller();

                    jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

                    jaxbMarshaller.marshal(mitarbeiter[i], new File(xmlfolder + "mitarbeiter" + mitarbeiter[i].getPersonalNumber() + ".xml"));
                    System.out.println("Mitarbeiter " + mitarbeiter[i].getName() + " gespeichert"); 
                }
                else {
                    max += 1;
                }
            }

            System.out.println("\n--- Speichern Ende ---\n");
            
        } catch (JAXBException ex) {
            Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void saveAllDB(){
                     
        int max = mitarbeiterCount;
        
        Statement query = null;      
        try {
            query = conn.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {

            String sql = "TRUNCATE Mitarbeiter";
            
            query.executeUpdate(sql);
            
            } catch (SQLException ex) {
            Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        
            for (int i = 0; i < max; i++) {
                
            try {
                Mitarbeiter toSave = mitarbeiter[i];
                
                String Name = toSave.getName();
                int Mitarbeiter_ID = toSave.getPersonalNumber();
                double Gehalt = toSave.getSalary();
                double Zeit_gearbeitet = toSave.getTime();
                
                // darkdl.de ni520829_2sql1 3306 ni520829_2sql1 HallohalloHallo
                
                String sql = "INSERT INTO Mitarbeiter(Name, Mitarbeiter_ID, Gehalt, Zeit_gearbeitet) VALUES ('" + Name + "','" + Mitarbeiter_ID + "','" + Gehalt + "','" + Zeit_gearbeitet + "')";
                
                query.executeUpdate(sql);
                
            } catch (SQLException ex) {
                Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
                break;
            }
                
            }

    }

    public void insertMitarbeiter(Mitarbeiter m) {
        
        model.addRow(new Object[]{m.getName(), "#" + m.getPersonalNumber(), m.getSalary() + "€", m.getTime() + "h"});
        
    }
    
    private void getNewWorkerInfo(){
        
      JTextField firstNameField = new JTextField(5);
      JTextField lastNameField = new JTextField(5);
      JTextField salaryField = new JTextField(5);

      JPanel newWorker = new JPanel();
      newWorker.add(new JLabel("Vorname"));
      newWorker.add(firstNameField);
      newWorker.add(Box.createHorizontalStrut(10));
      newWorker.add(new JLabel("Nachname"));
      newWorker.add(lastNameField);
      newWorker.add(Box.createHorizontalStrut(10));
      newWorker.add(new JLabel("Gehalt"));
      newWorker.add(salaryField);

      int result = JOptionPane.showConfirmDialog(null, newWorker, 
               "Daten für neuen Mitarbeiter", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
      
      if (result == JOptionPane.OK_OPTION) {
          
         System.out.println("--- Neuer Mitarbeiter Start ---\n");
         System.out.println("Vorname: " + firstNameField.getText());
         System.out.println("Nachname: " + lastNameField.getText());
         System.out.println("Gehalt: " + salaryField.getText());
         System.out.println("\n--- Neuer Mitarbeiter Ende ---\n");
         
         double salary = 0;
         
          try {
              
              salary = Double.parseDouble(salaryField.getText().replace(',', '.').replace('€', '\0').trim());
              
          } catch (Exception e) {
              
              JOptionPane.showMessageDialog(this, "Fehler bei eingabe der Daten \nBitte erneut versuchen!", "Fehler", JOptionPane.ERROR_MESSAGE);
              getNewWorkerInfo();
              
          }
         
          int mID = 0;
          int saveIn;
          int[] arr = getListOfUsedIDs();
          Arrays.sort(arr);
          
          for (int i = 0; true; i++) {
              if(Arrays.binarySearch(arr, 1000+i) < 0) {
                  mID = 1000+i;
                  break;
              }
          }
          
          for (int i = 0; true; i++) {
              if (mitarbeiter[i] == null) {
                  saveIn = i;
                  break;
              }
          }
          
         
         
          if (salary != 0) {
              
              mitarbeiter[saveIn] = new Mitarbeiter(lastNameField.getText() + ", " + firstNameField.getText(), mID, salary);
              insertMitarbeiter(mitarbeiter[saveIn]);
              mitarbeiterCount++;
              
          }else{
              
              JOptionPane.showMessageDialog(this, "Fehler bei eingabe der Daten \nBitte erneut versuchen!", "Fehler", JOptionPane.ERROR_MESSAGE);
              getNewWorkerInfo();
              
          }
         
    }
    }
    
    private int[] getListOfUsedIDs() {
        int[] ret = new int[mitarbeiter.length];
        int stelle = 0;
        
        for (int i = 0; i < ret.length; i++) {
            if(mitarbeiter[i] != null) {
                ret[stelle] = mitarbeiter[i].getPersonalNumber();
                stelle++;
            }
        }
        
        return ret;
    }
    
    private void closeMe(){
        
        saveall();
        System.exit(0);

    }
    
    public void loadall(){
        
        model.setRowCount(0);
        
        String propFileName = "settings.properties";
        PrintWriter writer = null;
        
        Properties prop = new Properties();
 
        try {
            inputStream = new FileInputStream(xmlfolder + propFileName);
        } catch (FileNotFoundException ex) {
            System.out.println("Konnte die settings.properties (" + xmlfolder + ") nicht finden!");
        }

		if (inputStream != null) {
                            
            try {
                
                prop.load(inputStream);
                
                String workercount = prop.getProperty(workercounts);
                iWorkercount = Integer.parseInt(workercount);
                dbHost = prop.getProperty(dbHosts);
                dbPort = prop.getProperty(dbPorts);
                dbName = prop.getProperty(dbNames);
                dbUser = prop.getProperty(dbUsers);
                
                if ("none".equals(dbHost) || "none".equals(dbPort) || "none".equals(dbName) || "none".equals(dbUser)) {
                }else{
                    
                    JTextField pwField = new JPasswordField(10);
                    JPanel dbPass = new JPanel();
                    dbPass.add(new JLabel("Passwort der zuletzt verbundenen Datenbank eingeben:\n"));
                    dbPass.add(pwField);
                    
                    int dbPasswordResult = JOptionPane.showConfirmDialog(null, dbPass, "Datenbankinformationen", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                    
                    if (dbPasswordResult == JOptionPane.OK_OPTION) {
                        
                        dbPassword = pwField.getText();
                        
                        connectDB();
                    
                    }
                }
                
            } catch (IOException ex) {
                Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
                }
        
        try {
            
            JAXBContext jc = JAXBContext.newInstance(Mitarbeiter.class);
            Unmarshaller um = jc.createUnmarshaller();
            File xmlfiles = new File(xmlfolder);
            File[] files = xmlfiles.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                if(name.contains("mitarbeiter")) {
                    return true;
                }
                else {
                    return false;
                }
            }
        });

            for (int i = 0; i < iWorkercount; i++) {
            
                mitarbeiter[i] = (Mitarbeiter) um.unmarshal(files[i]);
                insertMitarbeiter(mitarbeiter[i]);
            
            }

        } catch (Exception e) {
            
            System.out.println("Fehler beim unmarshalen");
            Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, e);
            
        }
        
        File x = new File(xmlfolder);

        mitarbeiterCount = iWorkercount;
        
    }
    
    private void loadAllDB(){
                     
        int max = mitarbeiterCount;
        int maxDB = 999 + mitarbeiterCount;
        
        Statement query = null;      
        try {
            query = conn.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {

            for (int i = 999; i < maxDB; i++) {
                
            String sql = "SELECT `Name`, `Mitarbeiter_ID`, `Gehalt`, `Zeit_gearbeitet` FROM `Mitarbeiter` WHERE Mitarbeiter_ID = '" + maxDB + "'";
            
            ResultSet result = query.executeQuery(sql);
                System.out.println(result);
                
                }    
            } catch (SQLException ex) {
            Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        
    } // darkdl.de ni520829_2sql1 3306 ni520829_2sql1 HallohalloHallo
    
    private void connectDB(){
        
        try {

                Class.forName("com.mysql.jdbc.Driver");

                JOptionPane.showMessageDialog(null, "Versuche zu verbinden\nDies kann einige Zeit in Anspruch nehmen\nBitte warten...", "", JOptionPane.INFORMATION_MESSAGE);

                conn = DriverManager.getConnection("jdbc:mysql://" + dbHost + ":"
                    + dbPort + "/" + dbName + "?" + "user=" + dbUser + "&"
                    + "password=" + dbPassword);

                JOptionPane.showMessageDialog(null, "Verbindung wurde hergestellt", "", JOptionPane.INFORMATION_MESSAGE);
                mitDBSave.setEnabled(true);
                mitDBLoad.setEnabled(true);
                mitDB.setEnabled(false);
                mitDBClose.setEnabled(true);
                
                

                Statement query;
                try {
                    query = conn.createStatement();

                    String sql = "CREATE TABLE IF NOT EXISTS Mitarbeiter(Name TEXT," +
                    " Mitarbeiter_ID INT, Gehalt DOUBLE, Zeit_gearbeitet DOUBLE)";

                    query.executeUpdate(sql);
                    
                    sql = "ALTER TABLE `Mitarbeiter` ADD UNIQUE (`Mitarbeiter_ID`)";

                    query.executeUpdate(sql);

                }catch(SQLException e){

                    e.printStackTrace();

                }catch(Exception e){

                    e.printStackTrace();

                }

            } catch (ClassNotFoundException e) {

                JOptionPane.showMessageDialog(null, "Konnte Treiber nicht finden", "Fehler!", JOptionPane.ERROR_MESSAGE);
                System.out.println("Treiber nicht gefunden");

            } catch (SQLException e) {

                JOptionPane.showMessageDialog(null, "Verbinden nicht möglich", "Fehler!", JOptionPane.ERROR_MESSAGE);
                System.out.println("Connect nicht moeglich");
                Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, e);

            }
        
    }
    
//    public void restartApplication(){
//        
//        try {
//            final String javaBin = System.getProperty("java.home") + File.separator + "bin" + File.separator + "java";
//            final File currentJar = new File(personalGUI.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath());
//            System.out.println(currentJar);
//            
//            /* is it a jar file? */
//            if(!currentJar.getName().endsWith(".jar"))
//                return;
//            
//            /* Build command: java -jar application.jar */
//            final ArrayList<String> command = new ArrayList<String>();
//            command.add(javaBin);
//            command.add("-jar");
//            command.add(currentJar.getPath());
//            
//            final ProcessBuilder builder = new ProcessBuilder(command);
//            builder.start();
//            System.exit(0);
//            
//        } catch (URISyntaxException | IOException ex) {
//            Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(personalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(personalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(personalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(personalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                /*
                try {
                    
                    Connection con = DriverManager.getConnection("jdbc:mysql://darkdl.de:3306/ni520829_2sql1", "ni520829_2sql1", "Hallohallo");
                    Statement stmt = con.createStatement();
                    
                } catch (SQLException ex) {
                    Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                */
                new personalGUI().setVisible(true);
            }
        });
        
    }
    
    
    
    //Alter Code (Friedhof):
    
//    private Mitarbeiter findMitarbeiterByID() {
//        
//        Mitarbeiter mit;
//        
//        JTextField idField = new JTextField(5);
//      
//        JPanel editWorker = new JPanel();
//        editWorker.add(new JLabel("Mitarbeiter-ID:"));
//        editWorker.add(idField);
//
//        int result = JOptionPane.showConfirmDialog(null, editWorker, 
//               "Welchern Mitarbeiter bearbeiten?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
//      
//        mit = null;
//      
//        if (result == JOptionPane.OK_OPTION) {
//
//            try{
//                
//                int searchID = Integer.parseInt(idField.getText().trim());
//                int toEditID = searchID - 1000;
//
//                for (int i = 0; i <= toEditID; i++) {
//
//                    if (mitarbeiter[i].getPersonalNumber() == searchID) {
//
//                        mit = mitarbeiter[i];
//                        i = toEditID;
//                        break;
//
//                    }
//                }
//
//            }catch (NumberFormatException x){
//                
//                JOptionPane.showMessageDialog(null, "Bitte Id eingeben", "Fehler", JOptionPane.ERROR_MESSAGE);
//                
//            }catch(Exception ex){
//
//                System.out.println("Konnte Datei nicht finden. Weiss auch nicht welche.");
//
//            }
//
//        }
//
//        return mit;
//    }
    
    /*if (fChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
            String path = fChooser.getSelectedFile().toString();
            String p = path.substring(0, path.lastIndexOf('\\') + 1);
            p = p + "mitarbeiter";
            System.out.println(path);
            System.out.println(p);
            System.out.println(mitarbeiter[0]);
            System.out.println(mitarbeiter[1]);
            
            try
            {
            while(true) {
            int i = 0;
            if(mitarbeiter[i] == null) {
            break;
            }
            BufferedWriter dat = new BufferedWriter(new FileWriter(p + mitarbeiter[i].getPersonalNumber() + ".txt"));
            dat.write(mitarbeiter[i].getName());
            dat.close();
            System.out.println("Success");
            }
            }
            catch (IOException x)
            {
            JOptionPane.showMessageDialog (null, "Kann Daten nicht speichern!");
            }
            }*/
        
//      JTextField idField = new JTextField(5);
//      
//      JPanel editWorker = new JPanel();
//      editWorker.add(new JLabel("Mitarbeiter-ID:"));
//      editWorker.add(idField);
//
//      int result = JOptionPane.showConfirmDialog(null, editWorker, 
//               "Welchern Mitarbeiter bearbeiten?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
//      
//      Mitarbeiter mit = null;
//      boolean mitFound = false;
//      
//      if (result == JOptionPane.OK_OPTION) {
//          
//          int searchID = Integer.parseInt(idField.getText().trim());
//          int toEditID = searchID - 1000;
//          int mitNummer = 0;
//          
//          try{
//          
//          for (int i = 0; i <= toEditID; i++) {
//              
//              if (mitarbeiter[i].getPersonalNumber() == searchID) {
//                  
//                  mit = mitarbeiter[i];
//                  mitNummer = i;
//                  i = toEditID;
//                  mitFound = true;
//              
//              }
//          }
//          
//          }catch(Exception ex){
//              
//              System.out.println("Konnte Datei nicht finden. Weiss auch nicht welche.");
//              
//          }  
    
//        File f = new File(xmlfolder + "/mysql-connector-java-5.1.39-bin.jar");
//        if(!f.exists() && !f.isDirectory()) { 
//            
//            try {
//                
//                System.out.println("Versuche MySQL-Treiber herunterzuladen.");
//                
//                URL website = new URL("http://dunkel.darkdl.de/mysql-connector-java-5.1.39-bin.jar");
//                ReadableByteChannel rbc = Channels.newChannel(website.openStream());
//                FileOutputStream fos = new FileOutputStream(xmlfolder + "/mysql-connector-java-5.1.39-bin.jar");
//                fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
//                
//                System.out.println("MySQL-Treiber erfolgreich heruntergeladen.");
//                
//                restartApplication();
//                
//            }catch(Exception ex){
//                Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
//                JOptionPane.showMessageDialog(null, "Konnte Datenbantreiber nicht herunterladen.", "", JOptionPane.ERROR_MESSAGE);
//                mnuDB.setEnabled(false);
//            }
//        }
    
//        File config = new File(xmlfolder + "settings.properties");
//        
//        String line = null;
//        int workerCount = 0;
//        try {
//            BufferedReader dat = new BufferedReader(new FileReader(config));
//            line = dat.readLine();
//            dat.close();
//        } catch (FileNotFoundException ex) {
//            System.out.println("Datei nicht gefunden. Werde keine daten einlesen.");
//        } catch (IOException ex) {
//            Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (Exception x) {
//            Logger.getLogger(personalGUI.class.getName()).log(Level.SEVERE, null, x);
//            System.out.println("FEHLER! Erster Start?");
//        }
//        
//        try{
//        
//        String linel = line.substring(line.lastIndexOf(':') + 2, line.length());
//        workerCount = Integer.parseInt(linel);
//        
//        }catch(NullPointerException ex){
//            
//            System.out.println("Konnte workercount nicht auslesen!");
//            
//        }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCreateWorker;
    private javax.swing.JButton cmdDeleteWorker;
    private javax.swing.JButton cmdEditWorker;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mitDB;
    private javax.swing.JMenuItem mitDBClose;
    private javax.swing.JMenuItem mitDBLoad;
    private javax.swing.JMenuItem mitDBSave;
    private javax.swing.JMenuItem mitDelete;
    private javax.swing.JMenuItem mitEdit;
    private javax.swing.JMenuItem mitNewMitarbeiter;
    private javax.swing.JMenuItem mitReload;
    private javax.swing.JMenuItem mitSave;
    private javax.swing.JMenu mnuDB;
    private javax.swing.JMenu mnuOptions;
    private javax.swing.JPopupMenu.Separator mse1;
    private javax.swing.JPopupMenu.Separator mse2;
    private javax.swing.JPanel pnlControls;
    private javax.swing.JTable tabPersonal;
    // End of variables declaration//GEN-END:variables
}
